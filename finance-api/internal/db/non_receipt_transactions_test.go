package db

import (
	"fmt"
	"github.com/ministryofjustice/opg-sirius-supervision-finance-hub/finance-api/internal/testhelpers"
	"github.com/ministryofjustice/opg-sirius-supervision-finance-hub/shared"
	"github.com/stretchr/testify/assert"
	"strconv"
)

func (suite *IntegrationSuite) Test_non_receipt_transactions() {
	ctx := suite.ctx

	today := suite.seeder.Today()
	yesterday := today.Sub(0, 0, 1)
	twoMonthsAgo := today.Sub(0, 2, 0)
	threeMonthsAgo := today.Sub(0, 3, 0)
	oneYearAgo := today.Sub(1, 0, 0)

	// client with one AD invoice, one minimal S3 invoice, a GS invoice, an exemption and a moto card payment. The payment creates an unapply.
	client1ID := suite.seeder.CreateClient(ctx, "Ian", "Test", "12345678", "1234")
	suite.seeder.CreateOrder(ctx, client1ID, "ACTIVE")

	_, _ = suite.seeder.CreateInvoice(ctx, client1ID, shared.InvoiceTypeAD, nil, twoMonthsAgo.StringPtr(), nil, nil, nil, yesterday.StringPtr())
	invoice2ID, _ := suite.seeder.CreateInvoice(ctx, client1ID, shared.InvoiceTypeS3, valToPtr("320.00"), threeMonthsAgo.StringPtr(), nil, nil, valToPtr("MINIMAL"), yesterday.StringPtr())
	suite.seeder.AddFeeRanges(ctx, invoice2ID, []testhelpers.FeeRange{{SupervisionLevel: "MINIMAL", FromDate: oneYearAgo.Date(), ToDate: today.Date()}})
	_, _ = suite.seeder.CreateInvoice(ctx, client1ID, shared.InvoiceTypeGS, valToPtr("350.00"), threeMonthsAgo.StringPtr(), nil, nil, valToPtr("GENERAL"), yesterday.StringPtr())

	_ = suite.seeder.CreateFeeReduction(ctx, client1ID, shared.FeeReductionTypeExemption, strconv.Itoa(yesterday.Date().Year()-1), 2, "Test", yesterday.Date())
	suite.seeder.CreatePayment(ctx, 1200, yesterday.Date(), "12345678", shared.TransactionTypeMotoCardPayment, yesterday.Date(), 0)

	// client with one AD invoice, an S2 invoice, a GA invoice, a hardship and a direct debit payment
	client2ID := suite.seeder.CreateClient(ctx, "Barry", "Test", "87654321", "4321")
	suite.seeder.CreateOrder(ctx, client1ID, "ACTIVE")

	_, _ = suite.seeder.CreateInvoice(ctx, client2ID, shared.InvoiceTypeAD, nil, twoMonthsAgo.StringPtr(), nil, nil, nil, yesterday.StringPtr())
	invoice7ID, _ := suite.seeder.CreateInvoice(ctx, client2ID, shared.InvoiceTypeS2, valToPtr("300.00"), threeMonthsAgo.StringPtr(), nil, nil, valToPtr("GENERAL"), yesterday.StringPtr())
	suite.seeder.AddFeeRanges(ctx, invoice7ID, []testhelpers.FeeRange{{SupervisionLevel: "GENERAL", FromDate: oneYearAgo.Date(), ToDate: today.Date()}})
	_, _ = suite.seeder.CreateInvoice(ctx, client2ID, shared.InvoiceTypeGA, nil, threeMonthsAgo.StringPtr(), nil, nil, nil, yesterday.StringPtr())

	_ = suite.seeder.CreateFeeReduction(ctx, client2ID, shared.FeeReductionTypeHardship, strconv.Itoa(yesterday.Date().Year()-1), 4, "Test", yesterday.Date())
	suite.seeder.CreatePayment(ctx, 1000, yesterday.Date(), "87654321", shared.TransactionTypeDirectDebitPayment, yesterday.Date(), 0)

	// client with an SE invoice, a credit memo, a direct debit payment and a reapply
	client3ID := suite.seeder.CreateClient(ctx, "Bill", "Wilson", "12344321", "9876")
	invoice9ID, _ := suite.seeder.CreateInvoice(ctx, client3ID, shared.InvoiceTypeSE, valToPtr("120"), threeMonthsAgo.StringPtr(), nil, nil, valToPtr("GENERAL"), yesterday.StringPtr())

	suite.seeder.CreateAdjustment(ctx, client3ID, invoice9ID, shared.AdjustmentTypeCreditMemo, -200, "", yesterday.DatePtr())
	suite.seeder.CreatePayment(ctx, 1000, yesterday.Date(), "12344321", shared.TransactionTypeDirectDebitPayment, yesterday.Date(), 0)
	suite.seeder.CreatePayment(ctx, 1500, yesterday.Date(), "12344321", shared.TransactionTypeReapply, yesterday.Date(), 0)

	// client with AD invoice, a partial payment and two exemptions on the same day. The exemptions create unapplies that should not be counted.
	client4ID := suite.seeder.CreateClient(ctx, "Flora", "Four", "44444444", "9876")
	_, _ = suite.seeder.CreateInvoice(ctx, client4ID, shared.InvoiceTypeAD, nil, threeMonthsAgo.StringPtr(), nil, nil, nil, yesterday.StringPtr())
	suite.seeder.CreatePayment(ctx, 1000, yesterday.Date(), "44444444", shared.TransactionTypeDirectDebitPayment, yesterday.Date(), 0)
	reductionID := suite.seeder.CreateFeeReduction(ctx, client4ID, shared.FeeReductionTypeExemption, strconv.Itoa(oneYearAgo.Date().Year()), 2, "Test", yesterday.Date())
	suite.seeder.CancelFeeReduction(ctx, reductionID)
	_ = suite.seeder.CreateFeeReduction(ctx, client4ID, shared.FeeReductionTypeExemption, strconv.Itoa(oneYearAgo.Date().Year()), 2, "Test", yesterday.Date())

	c := Client{suite.seeder.Conn}

	date := shared.NewDate(yesterday.String())

	rows, err := c.Run(ctx, &NonReceiptTransactions{
		Date: &date,
	})

	assert.NoError(suite.T(), err)
	assert.Equal(suite.T(), 25, len(rows))

	results := mapByHeader(rows)
	assert.NotEmpty(suite.T(), results)

	assert.Equal(suite.T(), "=\"0470\"", results[0]["Entity"], "Entity - AD invoice Credit")
	assert.Equal(suite.T(), "10482009", results[0]["Cost Centre"], "Cost Centre - AD invoice Credit")
	assert.Equal(suite.T(), "4481102093", results[0]["Account"], "Account - AD invoice Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[0]["Objective"], "Objective - AD invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[0]["Analysis"], "Analysis - AD invoice Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[0]["Intercompany"], "Intercompany - AD invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[0]["Spare"], "Spare - AD invoice Credit")
	assert.Equal(suite.T(), "", results[0]["Debit"], "Debit - AD invoice Credit")
	assert.Equal(suite.T(), "300.00", results[0]["Credit"], "Credit - AD invoice Credit")
	assert.Equal(suite.T(), fmt.Sprintf("AD invoice [%s]", yesterday.Date().Format("02/01/2006")), results[0]["Line description"], "Line description - AD invoice Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[1]["Entity"], "Entity - AD invoice Debit")
	assert.Equal(suite.T(), "99999999", results[1]["Cost Centre"], "Cost Centre - AD invoice Debit")
	assert.Equal(suite.T(), "1816102003", results[1]["Account"], "Account - AD invoice Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[1]["Objective"], "Objective - AD invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[1]["Analysis"], "Analysis - AD invoice Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[1]["Intercompany"], "Intercompany - AD invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[1]["Spare"], "Spare - AD invoice Debit")
	assert.Equal(suite.T(), "300.00", results[1]["Debit"], "Debit - AD invoice Debit")
	assert.Equal(suite.T(), "", results[1]["Credit"], "Credit - AD invoice Debit")
	assert.Equal(suite.T(), fmt.Sprintf("AD invoice [%s]", yesterday.Date().Format("02/01/2006")), results[1]["Line description"], "Line description - AD invoice Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[2]["Entity"], "Entity - S2 invoice Credit")
	assert.Equal(suite.T(), "10482009", results[2]["Cost Centre"], "Cost Centre - S2 invoice Credit")
	assert.Equal(suite.T(), "4481102094", results[2]["Account"], "Account - S2 invoice Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[2]["Objective"], "Objective - S2 invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[2]["Analysis"], "Analysis - S2 invoice Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[2]["Intercompany"], "Intercompany - S2 invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[2]["Spare"], "Spare - S2 invoice Credit")
	assert.Equal(suite.T(), "", results[2]["Debit"], "Debit - S2 invoice Credit")
	assert.Equal(suite.T(), "300.00", results[2]["Credit"], "Credit - S2 invoice Credit")
	assert.Equal(suite.T(), fmt.Sprintf("S2 invoice [%s]", yesterday.Date().Format("02/01/2006")), results[2]["Line description"], "Line description - S2 invoice Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[3]["Entity"], "Entity - S2 invoice Debit")
	assert.Equal(suite.T(), "99999999", results[3]["Cost Centre"], "Cost Centre - S2 invoice Debit")
	assert.Equal(suite.T(), "1816102003", results[3]["Account"], "Account - S2 invoice Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[3]["Objective"], "Objective - S2 invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[3]["Analysis"], "Analysis - S2 invoice Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[3]["Intercompany"], "Intercompany - S2 invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[3]["Spare"], "Spare - S2 invoice Debit")
	assert.Equal(suite.T(), "300.00", results[3]["Debit"], "Debit - S2 invoice Debit")
	assert.Equal(suite.T(), "", results[3]["Credit"], "Credit - S2 invoice Debit")
	assert.Equal(suite.T(), fmt.Sprintf("S2 invoice [%s]", yesterday.Date().Format("02/01/2006")), results[3]["Line description"], "Line description - S2 invoice Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[4]["Entity"], "Entity - S3 invoice Credit")
	assert.Equal(suite.T(), "10482009", results[4]["Cost Centre"], "Cost Centre - S3 invoice Credit")
	assert.Equal(suite.T(), "4481102099", results[4]["Account"], "Account - S3 invoice Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[4]["Objective"], "Objective - S3 invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[4]["Analysis"], "Analysis - S3 invoice Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[4]["Intercompany"], "Intercompany - S3 invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[4]["Spare"], "Spare - S3 invoice Credit")
	assert.Equal(suite.T(), "", results[4]["Debit"], "Debit - S3 invoice Credit")
	assert.Equal(suite.T(), "320.00", results[4]["Credit"], "Credit - S3 invoice Credit")
	assert.Equal(suite.T(), fmt.Sprintf("S3 invoice [%s]", yesterday.Date().Format("02/01/2006")), results[4]["Line description"], "Line description - S3 invoice Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[5]["Entity"], "Entity - S3 invoice Debit")
	assert.Equal(suite.T(), "99999999", results[5]["Cost Centre"], "Cost Centre - S3 invoice Debit")
	assert.Equal(suite.T(), "1816102003", results[5]["Account"], "Account - S3 invoice Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[5]["Objective"], "Objective - S3 invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[5]["Analysis"], "Analysis - S3 invoice Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[5]["Intercompany"], "Intercompany - S3 invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[5]["Spare"], "Spare - S3 invoice Debit")
	assert.Equal(suite.T(), "320.00", results[5]["Debit"], "Debit - S3 invoice Debit")
	assert.Equal(suite.T(), "", results[5]["Credit"], "Credit - S3 invoice Debit")
	assert.Equal(suite.T(), fmt.Sprintf("S3 invoice [%s]", yesterday.Date().Format("02/01/2006")), results[5]["Line description"], "Line description - S3 invoice Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[6]["Entity"], "Entity - Gen SE invoice Credit")
	assert.Equal(suite.T(), "10482009", results[6]["Cost Centre"], "Cost Centre - Gen SE invoice Credit")
	assert.Equal(suite.T(), "4481102094", results[6]["Account"], "Account - Gen SE invoice Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[6]["Objective"], "Objective - Gen SE invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[6]["Analysis"], "Analysis - Gen SE invoice Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[6]["Intercompany"], "Intercompany - Gen SE invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[6]["Spare"], "Spare - Gen SE invoice Credit")
	assert.Equal(suite.T(), "", results[6]["Debit"], "Debit - Gen SE invoice Credit")
	assert.Equal(suite.T(), "120.00", results[6]["Credit"], "Credit - Gen SE invoice Credit")
	assert.Equal(suite.T(), fmt.Sprintf("Gen SE invoice [%s]", yesterday.Date().Format("02/01/2006")), results[6]["Line description"], "Line description - Gen SE invoice Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[7]["Entity"], "Entity - Gen SE invoice Debit")
	assert.Equal(suite.T(), "99999999", results[7]["Cost Centre"], "Cost Centre - Gen SE invoice Debit")
	assert.Equal(suite.T(), "1816102003", results[7]["Account"], "Account - Gen SE invoice Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[7]["Objective"], "Objective - Gen SE invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[7]["Analysis"], "Analysis - Gen SE invoice Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[7]["Intercompany"], "Intercompany - Gen SE invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[7]["Spare"], "Spare - Gen SE invoice Debit")
	assert.Equal(suite.T(), "120.00", results[7]["Debit"], "Debit - Gen SE invoice Debit")
	assert.Equal(suite.T(), "", results[7]["Credit"], "Credit - Gen SE invoice Debit")
	assert.Equal(suite.T(), fmt.Sprintf("Gen SE invoice [%s]", yesterday.Date().Format("02/01/2006")), results[7]["Line description"], "Line description - Gen SE invoice Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[8]["Entity"], "Entity - GA invoice Credit")
	assert.Equal(suite.T(), "10486000", results[8]["Cost Centre"], "Cost Centre - GA invoice Credit")
	assert.Equal(suite.T(), "4481102104", results[8]["Account"], "Account - GA invoice Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[8]["Objective"], "Objective - GA invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[8]["Analysis"], "Analysis - GA invoice Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[8]["Intercompany"], "Intercompany - GA invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[8]["Spare"], "Spare - GA invoice Credit")
	assert.Equal(suite.T(), "", results[8]["Debit"], "Debit - GA invoice Credit")
	assert.Equal(suite.T(), "200.00", results[8]["Credit"], "Credit - GA invoice Credit")
	assert.Equal(suite.T(), fmt.Sprintf("GA invoice [%s]", yesterday.Date().Format("02/01/2006")), results[8]["Line description"], "Line description - GA invoice Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[9]["Entity"], "Entity - GA invoice Debit")
	assert.Equal(suite.T(), "99999999", results[9]["Cost Centre"], "Cost Centre - GA invoice Debit")
	assert.Equal(suite.T(), "1816102003", results[9]["Account"], "Account - GA invoice Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[9]["Objective"], "Objective - GA invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[9]["Analysis"], "Analysis - GA invoice Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[9]["Intercompany"], "Intercompany - GA invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[9]["Spare"], "Spare - GA invoice Debit")
	assert.Equal(suite.T(), "200.00", results[9]["Debit"], "Debit - GA invoice Debit")
	assert.Equal(suite.T(), "", results[9]["Credit"], "Credit - GA invoice Debit")
	assert.Equal(suite.T(), fmt.Sprintf("GA invoice [%s]", yesterday.Date().Format("02/01/2006")), results[9]["Line description"], "Line description - GA invoice Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[10]["Entity"], "Entity - GS invoice Debit")
	assert.Equal(suite.T(), "10486000", results[10]["Cost Centre"], "Cost Centre - GS invoice Debit")
	assert.Equal(suite.T(), "4481102105", results[10]["Account"], "Account - GS invoice Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[10]["Objective"], "Objective - GS invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[10]["Analysis"], "Analysis - GS invoice Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[10]["Intercompany"], "Intercompany - GS invoice Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[10]["Spare"], "Spare - GS invoice Debit")
	assert.Equal(suite.T(), "", results[10]["Debit"], "Debit - GS invoice Debit")
	assert.Equal(suite.T(), "350.00", results[10]["Credit"], "Credit - GS invoice Debit")
	assert.Equal(suite.T(), fmt.Sprintf("GS invoice [%s]", yesterday.Date().Format("02/01/2006")), results[10]["Line description"], "Line description - GS invoice Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[11]["Entity"], "Entity - GS invoice Credit")
	assert.Equal(suite.T(), "99999999", results[11]["Cost Centre"], "Cost Centre - GS invoice Credit")
	assert.Equal(suite.T(), "1816102003", results[11]["Account"], "Account - GS invoice Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[11]["Objective"], "Objective - GS invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[11]["Analysis"], "Analysis - GS invoice Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[11]["Intercompany"], "Intercompany - GS invoice Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[11]["Spare"], "Spare - GS invoice Credit")
	assert.Equal(suite.T(), "350.00", results[11]["Debit"], "Debit - GS invoice Credit")
	assert.Equal(suite.T(), "", results[11]["Credit"], "Credit - GS invoice Credit")
	assert.Equal(suite.T(), fmt.Sprintf("GS invoice [%s]", yesterday.Date().Format("02/01/2006")), results[11]["Line description"], "Line description - GS invoice Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[12]["Entity"], "Entity - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "10482009", results[12]["Cost Centre"], "Cost Centre - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "4481102114", results[12]["Account"], "Account - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[12]["Objective"], "Objective - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[12]["Analysis"], "Analysis - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[12]["Intercompany"], "Intercompany - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[12]["Spare"], "Spare - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "400.00", results[12]["Debit"], "Debit - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "", results[12]["Credit"], "Credit - AD Remissions & Exemptions Debit")
	assert.Equal(suite.T(), fmt.Sprintf("AD Rem/Exem [%s]", yesterday.Date().Format("02/01/2006")), results[12]["Line description"], "Line description - AD Remissions & Exemptions Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[13]["Entity"], "Entity - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "99999999", results[13]["Cost Centre"], "Cost Centre - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "1816102003", results[13]["Account"], "Account - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[13]["Objective"], "Objective - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[13]["Analysis"], "Analysis - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[13]["Intercompany"], "Intercompany - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[13]["Spare"], "Spare - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "", results[13]["Debit"], "Debit - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "400.00", results[13]["Credit"], "Credit - AD Remissions & Exemptions Credit")
	assert.Equal(suite.T(), fmt.Sprintf("AD Rem/Exem [%s]", yesterday.Date().Format("02/01/2006")), results[13]["Line description"], "Line description - AD Remissions & Exemptions Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[14]["Entity"], "Entity - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "10482009", results[14]["Cost Centre"], "Cost Centre - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "4481102115", results[14]["Account"], "Account - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[14]["Objective"], "Objective - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[14]["Analysis"], "Analysis - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[14]["Intercompany"], "Intercompany - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[14]["Spare"], "Spare - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "300.00", results[14]["Debit"], "Debit - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "", results[14]["Credit"], "Credit - General Remissions & Exemptions Debit")
	assert.Equal(suite.T(), fmt.Sprintf("Gen Rem/Exem [%s]", yesterday.Date().Format("02/01/2006")), results[14]["Line description"], "Line description - General Remissions & Exemptions Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[15]["Entity"], "Entity - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "99999999", results[15]["Cost Centre"], "Cost Centre - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "1816102003", results[15]["Account"], "Account - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[15]["Objective"], "Objective - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[15]["Analysis"], "Analysis - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[15]["Intercompany"], "Intercompany - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[15]["Spare"], "Spare - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "", results[15]["Debit"], "Debit - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "300.00", results[15]["Credit"], "Credit - General Remissions & Exemptions Credit")
	assert.Equal(suite.T(), fmt.Sprintf("Gen Rem/Exem [%s]", yesterday.Date().Format("02/01/2006")), results[15]["Line description"], "Line description - General Remissions & Exemptions Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[16]["Entity"], "Entity - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "10482009", results[16]["Cost Centre"], "Cost Centre - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "4481102120", results[16]["Account"], "Account - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[16]["Objective"], "Objective - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[16]["Analysis"], "Analysis - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[16]["Intercompany"], "Intercompany - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[16]["Spare"], "Spare - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "320.00", results[16]["Debit"], "Debit - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), "", results[16]["Credit"], "Credit - Minimal Remissions & Exemptions Debit")
	assert.Equal(suite.T(), fmt.Sprintf("Min Rem/Exem [%s]", yesterday.Date().Format("02/01/2006")), results[16]["Line description"], "Line description - Minimal Remissions & Exemptions Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[17]["Entity"], "Entity - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "99999999", results[17]["Cost Centre"], "Cost Centre - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "1816102003", results[17]["Account"], "Account - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[17]["Objective"], "Objective - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[17]["Analysis"], "Analysis - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[17]["Intercompany"], "Intercompany - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[17]["Spare"], "Spare - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "", results[17]["Debit"], "Debit - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), "320.00", results[17]["Credit"], "Credit - Minimal Remissions & Exemptions Credit")
	assert.Equal(suite.T(), fmt.Sprintf("Min Rem/Exem [%s]", yesterday.Date().Format("02/01/2006")), results[17]["Line description"], "Line description - Minimal Remissions & Exemptions Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[18]["Entity"], "Entity - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "10486000", results[18]["Cost Centre"], "Cost Centre - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "4481102107", results[18]["Account"], "Account - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[18]["Objective"], "Objective - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[18]["Analysis"], "Analysis - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[18]["Intercompany"], "Intercompany - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[18]["Spare"], "Spare - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "200.00", results[18]["Debit"], "Debit - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), "", results[18]["Credit"], "Credit - GA Remissions & Hardships Debit")
	assert.Equal(suite.T(), fmt.Sprintf("GA remissions & hardships [%s]", yesterday.Date().Format("02/01/2006")), results[18]["Line description"], "Line description - GA Remissions & Hardships Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[19]["Entity"], "Entity - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "99999999", results[19]["Cost Centre"], "Cost Centre - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "1816102003", results[19]["Account"], "Account - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[19]["Objective"], "Objective - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[19]["Analysis"], "Analysis - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[19]["Intercompany"], "Intercompany - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[19]["Spare"], "Spare - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "", results[19]["Debit"], "Debit - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), "200.00", results[19]["Credit"], "Credit - GA Remissions & Hardships Credit")
	assert.Equal(suite.T(), fmt.Sprintf("GA remissions & hardships [%s]", yesterday.Date().Format("02/01/2006")), results[19]["Line description"], "Line description - GA Remissions & Hardships Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[20]["Entity"], "Entity - GS exemptions Debit")
	assert.Equal(suite.T(), "10486000", results[20]["Cost Centre"], "Cost Centre - GS exemptions Debit")
	assert.Equal(suite.T(), "4481102108", results[20]["Account"], "Account - GS exemptions Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[20]["Objective"], "Objective - GS exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[20]["Analysis"], "Analysis - GS exemptions Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[20]["Intercompany"], "Intercompany - GS exemptions Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[20]["Spare"], "Spare - GS exemptions Debit")
	assert.Equal(suite.T(), "350.00", results[20]["Debit"], "Debit - GS exemptions Debit")
	assert.Equal(suite.T(), "", results[20]["Credit"], "Credit - GS exemptions Debit")
	assert.Equal(suite.T(), fmt.Sprintf("GS exemptions [%s]", yesterday.Date().Format("02/01/2006")), results[20]["Line description"], "Line description - GS exemptions Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[21]["Entity"], "Entity - GS exemptions Credit")
	assert.Equal(suite.T(), "99999999", results[21]["Cost Centre"], "Cost Centre - GS exemptions Credit")
	assert.Equal(suite.T(), "1816102003", results[21]["Account"], "Account - GS exemptions Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[21]["Objective"], "Objective - GS exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[21]["Analysis"], "Analysis - GS exemptions Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[21]["Intercompany"], "Intercompany - GS exemptions Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[21]["Spare"], "Spare - GS exemptions Credit")
	assert.Equal(suite.T(), "", results[21]["Debit"], "Debit - GS exemptions Credit")
	assert.Equal(suite.T(), "350.00", results[21]["Credit"], "Credit - GS exemptions Credit")
	assert.Equal(suite.T(), fmt.Sprintf("GS exemptions [%s]", yesterday.Date().Format("02/01/2006")), results[21]["Line description"], "Line description - GS exemptions Credit")

	assert.Equal(suite.T(), "=\"0470\"", results[22]["Entity"], "Entity - Manual credit Debit")
	assert.Equal(suite.T(), "10482009", results[22]["Cost Centre"], "Cost Centre - Manual credit Debit")
	assert.Equal(suite.T(), "4481102094", results[22]["Account"], "Account - Manual credit Debit")
	assert.Equal(suite.T(), "=\"0000000\"", results[22]["Objective"], "Objective - Manual credit Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[22]["Analysis"], "Analysis - Manual credit Debit")
	assert.Equal(suite.T(), "=\"0000\"", results[22]["Intercompany"], "Intercompany - Manual credit Debit")
	assert.Equal(suite.T(), "=\"00000000\"", results[22]["Spare"], "Spare - Manual credit Debit")
	assert.Equal(suite.T(), "", results[22]["Debit"], "Debit - Manual credit Debit")
	assert.Equal(suite.T(), "2.00", results[22]["Credit"], "Credit - Manual credit Debit")
	assert.Equal(suite.T(), fmt.Sprintf("Gen Manual credit [%s]", yesterday.Date().Format("02/01/2006")), results[22]["Line description"], "Line description - Manual credit Debit")

	assert.Equal(suite.T(), "=\"0470\"", results[23]["Entity"], "Entity - Manual credit Credit")
	assert.Equal(suite.T(), "99999999", results[23]["Cost Centre"], "Cost Centre - Manual credit Credit")
	assert.Equal(suite.T(), "1816102003", results[23]["Account"], "Account - Manual credit Credit")
	assert.Equal(suite.T(), "=\"0000000\"", results[23]["Objective"], "Objective - Manual credit Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[23]["Analysis"], "Analysis - Manual credit Credit")
	assert.Equal(suite.T(), "=\"0000\"", results[23]["Intercompany"], "Intercompany - Manual credit Credit")
	assert.Equal(suite.T(), "=\"00000000\"", results[23]["Spare"], "Spare - Manual credit Credit")
	assert.Equal(suite.T(), "2.00", results[23]["Debit"], "Debit - Manual credit Credit")
	assert.Equal(suite.T(), "", results[23]["Credit"], "Credit - Manual credit Credit")
	assert.Equal(suite.T(), fmt.Sprintf("Gen Manual credit [%s]", yesterday.Date().Format("02/01/2006")), results[23]["Line description"], "Line description - Manual credit Credit")
}
