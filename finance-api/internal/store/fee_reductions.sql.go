// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: fee_reductions.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFeeReductions = `-- name: GetFeeReductions :many
select fr.id,
       discounttype,
       startdate,
       enddate,
       datereceived,
       case
           when (startdate < CURRENT_DATE and enddate > CURRENT_DATE) then 'Active'
           when CURRENT_DATE > enddate then 'Expired'
           else 'Cancelled' end as status,
       notes
from fee_reduction fr
    inner join finance_client fc on fc.id = fr.finance_client_id
where fr.finance_client_id = $1
order by enddate desc
`

type GetFeeReductionsRow struct {
	ID           int32
	Discounttype string
	Startdate    pgtype.Date
	Enddate      pgtype.Date
	Datereceived pgtype.Date
	Status       string
	Notes        string
}

func (q *Queries) GetFeeReductions(ctx context.Context, financeClientID pgtype.Int4) ([]GetFeeReductionsRow, error) {
	rows, err := q.db.Query(ctx, getFeeReductions, financeClientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeeReductionsRow
	for rows.Next() {
		var i GetFeeReductionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Discounttype,
			&i.Startdate,
			&i.Enddate,
			&i.Datereceived,
			&i.Status,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
