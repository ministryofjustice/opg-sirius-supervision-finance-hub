// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refunds.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRefunds = `-- name: GetRefunds :many
SELECT r.id,
       r.raised_date,
       r.fulfilled_date,
       r.amount,
       r.status,
       r.notes,
       r.created_by,
       COALESCE(bd.name, '')::VARCHAR      AS account_name,
       COALESCE(bd.account, '')::VARCHAR   AS account_code,
       COALESCE(bd.sort_code, '')::VARCHAR AS sort_code
FROM refund r
         LEFT JOIN bank_details bd ON r.id = bd.refund_id
WHERE client_id = $1
ORDER BY r.raised_date DESC, r.created_at DESC
`

type GetRefundsRow struct {
	ID            int32
	RaisedDate    pgtype.Date
	FulfilledDate pgtype.Date
	Amount        int32
	Status        string
	Notes         string
	CreatedBy     int32
	AccountName   string
	AccountCode   string
	SortCode      string
}

func (q *Queries) GetRefunds(ctx context.Context, clientID int32) ([]GetRefundsRow, error) {
	rows, err := q.db.Query(ctx, getRefunds, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRefundsRow
	for rows.Next() {
		var i GetRefundsRow
		if err := rows.Scan(
			&i.ID,
			&i.RaisedDate,
			&i.FulfilledDate,
			&i.Amount,
			&i.Status,
			&i.Notes,
			&i.CreatedBy,
			&i.AccountName,
			&i.AccountCode,
			&i.SortCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
