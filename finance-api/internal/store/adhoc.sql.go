// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: adhoc.sql

package store

import (
	"context"
)

const getClientsWithCredit = `-- name: GetClientsWithCredit :many
SELECT fc.client_id AS finance_client_id
FROM finance_client fc
         LEFT JOIN ledger l ON fc.id = l.finance_client_id
         LEFT JOIN ledger_allocation la ON l.id = la.ledger_id
WHERE la.status IN ('UNAPPLIED', 'REAPPLIED')
GROUP BY fc.client_id
HAVING ABS(SUM(la.amount)) > 0
`

func (q *Queries) GetClientsWithCredit(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getClientsWithCredit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var finance_client_id int32
		if err := rows.Scan(&finance_client_id); err != nil {
			return nil, err
		}
		items = append(items, finance_client_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
