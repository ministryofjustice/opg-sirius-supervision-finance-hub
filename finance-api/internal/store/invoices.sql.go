// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: invoices.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addInvoice = `-- name: AddInvoice :one
INSERT INTO invoice (id, person_id, finance_client_id, feetype, reference, startdate, enddate, amount, confirmeddate,
                     raiseddate, source, createddate, createdby_id)
VALUES (nextval('invoice_id_seq'),
        $1,
        (select id from finance_client where client_id = $1),
        $2,
        $3,
        $4,
        $5,
        $6,
        now(),
        $7,
        $8,
        now(),
        $9)
returning id, person_id, finance_client_id, feetype, reference, startdate, enddate, amount, supervisionlevel, confirmeddate, batchnumber, raiseddate, source, scheduledfn14date, cacheddebtamount, createddate, createdby_id
`

type AddInvoiceParams struct {
	PersonID    pgtype.Int4
	Feetype     string
	Reference   string
	Startdate   pgtype.Date
	Enddate     pgtype.Date
	Amount      int32
	Raiseddate  pgtype.Date
	Source      pgtype.Text
	CreatedbyID pgtype.Int4
}

func (q *Queries) AddInvoice(ctx context.Context, arg AddInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, addInvoice,
		arg.PersonID,
		arg.Feetype,
		arg.Reference,
		arg.Startdate,
		arg.Enddate,
		arg.Amount,
		arg.Raiseddate,
		arg.Source,
		arg.CreatedbyID,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.FinanceClientID,
		&i.Feetype,
		&i.Reference,
		&i.Startdate,
		&i.Enddate,
		&i.Amount,
		&i.Supervisionlevel,
		&i.Confirmeddate,
		&i.Batchnumber,
		&i.Raiseddate,
		&i.Source,
		&i.Scheduledfn14date,
		&i.Cacheddebtamount,
		&i.Createddate,
		&i.CreatedbyID,
	)
	return i, err
}

const getInvoiceBalanceDetails = `-- name: GetInvoiceBalanceDetails :one
SELECT i.amount initial, i.amount - COALESCE(SUM(la.amount), 0) outstanding, i.feetype,
       COALESCE(bool_or(l.type = 'CREDIT WRITE OFF'), false)::bool written_off
FROM invoice i
         LEFT JOIN ledger_allocation la on i.id = la.invoice_id
         LEFT JOIN ledger l ON l.id = la.ledger_id
    AND la.status NOT IN ('PENDING', 'UNALLOCATED')
WHERE i.id = $1
group by i.amount, i.feetype
`

type GetInvoiceBalanceDetailsRow struct {
	Initial     int32
	Outstanding int32
	Feetype     string
	WrittenOff  bool
}

func (q *Queries) GetInvoiceBalanceDetails(ctx context.Context, id int32) (GetInvoiceBalanceDetailsRow, error) {
	row := q.db.QueryRow(ctx, getInvoiceBalanceDetails, id)
	var i GetInvoiceBalanceDetailsRow
	err := row.Scan(
		&i.Initial,
		&i.Outstanding,
		&i.Feetype,
		&i.WrittenOff,
	)
	return i, err
}

const getInvoiceBalancesForFeeReductionRange = `-- name: GetInvoiceBalancesForFeeReductionRange :many
SELECT
    i.id,
    i.amount,
    ifr.amount AS general_supervision_fee,
    i.amount - COALESCE(SUM(la.amount), 0) outstanding,
    i.feetype
FROM invoice i
        JOIN fee_reduction fr ON i.finance_client_id = fr.finance_client_id
        LEFT JOIN ledger_allocation la on i.id = la.invoice_id
        LEFT JOIN ledger l ON l.id = la.ledger_id
        LEFT JOIN invoice_fee_range ifr ON i.id = ifr.invoice_id AND i.supervisionlevel = 'GENERAL'
WHERE i.raiseddate >= (fr.datereceived - interval '6 months')
 AND i.raiseddate BETWEEN fr.startdate AND fr.enddate
 AND fr.id = $1
GROUP BY i.id, ifr.amount
`

type GetInvoiceBalancesForFeeReductionRangeRow struct {
	ID                    int32
	Amount                int32
	GeneralSupervisionFee pgtype.Int4
	Outstanding           int32
	Feetype               string
}

func (q *Queries) GetInvoiceBalancesForFeeReductionRange(ctx context.Context, id int32) ([]GetInvoiceBalancesForFeeReductionRangeRow, error) {
	rows, err := q.db.Query(ctx, getInvoiceBalancesForFeeReductionRange, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoiceBalancesForFeeReductionRangeRow
	for rows.Next() {
		var i GetInvoiceBalancesForFeeReductionRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.GeneralSupervisionFee,
			&i.Outstanding,
			&i.Feetype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceCounter = `-- name: GetInvoiceCounter :one
INSERT INTO counter (id, key, counter)
VALUES (nextval('counter_id_seq'), $1, 1)
ON CONFLICT (key) DO UPDATE
    SET counter = counter.counter + 1
RETURNING counter::VARCHAR
`

func (q *Queries) GetInvoiceCounter(ctx context.Context, key string) (string, error) {
	row := q.db.QueryRow(ctx, getInvoiceCounter, key)
	var counter string
	err := row.Scan(&counter)
	return counter, err
}

const getInvoices = `-- name: GetInvoices :many
SELECT i.id,
       i.raiseddate,
       i.reference,
       i.amount,
       COALESCE(SUM(la.amount), 0)::int received,
       COALESCE(MAX(fr.type), '')::VARCHAR fee_reduction_type
FROM invoice i
         JOIN finance_client fc ON fc.id = i.finance_client_id
         LEFT JOIN ledger_allocation la ON i.id = la.invoice_id AND la.status NOT IN ('PENDING', 'UNALLOCATED')
         LEFT JOIN ledger l ON la.ledger_id = l.id
         LEFT JOIN fee_reduction fr ON l.fee_reduction_id = fr.id
WHERE fc.client_id = $1
GROUP BY i.id, i.raiseddate
ORDER BY i.raiseddate DESC
`

type GetInvoicesRow struct {
	ID               int32
	Raiseddate       pgtype.Date
	Reference        string
	Amount           int32
	Received         int32
	FeeReductionType string
}

func (q *Queries) GetInvoices(ctx context.Context, clientID int32) ([]GetInvoicesRow, error) {
	rows, err := q.db.Query(ctx, getInvoices, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoicesRow
	for rows.Next() {
		var i GetInvoicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Raiseddate,
			&i.Reference,
			&i.Amount,
			&i.Received,
			&i.FeeReductionType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerAllocations = `-- name: GetLedgerAllocations :many
SELECT la.invoice_id, la.id, la.amount, la.datetime, l.bankdate, l.type, la.status
FROM ledger_allocation la
         INNER JOIN ledger l ON la.ledger_id = l.id
WHERE la.invoice_id = ANY($1::int[])
ORDER BY la.id DESC
`

type GetLedgerAllocationsRow struct {
	InvoiceID pgtype.Int4
	ID        int32
	Amount    int32
	Datetime  pgtype.Timestamp
	Bankdate  pgtype.Date
	Type      string
	Status    string
}

func (q *Queries) GetLedgerAllocations(ctx context.Context, dollar_1 []int32) ([]GetLedgerAllocationsRow, error) {
	rows, err := q.db.Query(ctx, getLedgerAllocations, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLedgerAllocationsRow
	for rows.Next() {
		var i GetLedgerAllocationsRow
		if err := rows.Scan(
			&i.InvoiceID,
			&i.ID,
			&i.Amount,
			&i.Datetime,
			&i.Bankdate,
			&i.Type,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSupervisionLevels = `-- name: GetSupervisionLevels :many
SELECT invoice_id, supervisionlevel, fromdate, todate, amount
FROM invoice_fee_range
WHERE invoice_id = ANY($1::int[])
ORDER BY todate DESC
`

type GetSupervisionLevelsRow struct {
	InvoiceID        pgtype.Int4
	Supervisionlevel string
	Fromdate         pgtype.Date
	Todate           pgtype.Date
	Amount           int32
}

func (q *Queries) GetSupervisionLevels(ctx context.Context, dollar_1 []int32) ([]GetSupervisionLevelsRow, error) {
	rows, err := q.db.Query(ctx, getSupervisionLevels, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSupervisionLevelsRow
	for rows.Next() {
		var i GetSupervisionLevelsRow
		if err := rows.Scan(
			&i.InvoiceID,
			&i.Supervisionlevel,
			&i.Fromdate,
			&i.Todate,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
