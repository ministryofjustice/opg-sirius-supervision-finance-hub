// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ledger_allocation.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLedgerAllocationForFeeReduction = `-- name: CreateLedgerAllocationForFeeReduction :one
INSERT INTO supervision_finance.ledger_allocation (id, ledger_id, invoice_id, datetime, amount, status, reference,
                               notes, allocateddate, batchnumber, source,
                               transaction_type)
VALUES (NEXTVAL('supervision_finance.ledger_allocation_id_seq'::REGCLASS), $1, $2, NOW(), $3, 'ALLOCATED', NULL, NULL, NULL, NULL, NULL,
        NULL)
RETURNING id, ledger_id, invoice_id, datetime, amount, status, reference, notes, allocateddate, batchnumber, source, transaction_type
`

type CreateLedgerAllocationForFeeReductionParams struct {
	LedgerID  pgtype.Int4
	InvoiceID pgtype.Int4
	Amount    int32
}

func (q *Queries) CreateLedgerAllocationForFeeReduction(ctx context.Context, arg CreateLedgerAllocationForFeeReductionParams) (SupervisionFinanceLedgerAllocation, error) {
	row := q.db.QueryRow(ctx, createLedgerAllocationForFeeReduction, arg.LedgerID, arg.InvoiceID, arg.Amount)
	var i SupervisionFinanceLedgerAllocation
	err := row.Scan(
		&i.ID,
		&i.LedgerID,
		&i.InvoiceID,
		&i.Datetime,
		&i.Amount,
		&i.Status,
		&i.Reference,
		&i.Notes,
		&i.Allocateddate,
		&i.Batchnumber,
		&i.Source,
		&i.TransactionType,
	)
	return i, err
}

const updateLedgerAllocationAdjustment = `-- name: UpdateLedgerAllocationAdjustment :exec
UPDATE supervision_finance.ledger_allocation la
SET status = $1
FROM supervision_finance.ledger l
WHERE l.id = $2
  AND l.id = la.ledger_id
  AND l.type IN ('CREDIT MEMO', 'CREDIT WRITE OFF', 'DEBIT MEMO')
`

type UpdateLedgerAllocationAdjustmentParams struct {
	Status string
	ID     int32
}

func (q *Queries) UpdateLedgerAllocationAdjustment(ctx context.Context, arg UpdateLedgerAllocationAdjustmentParams) error {
	_, err := q.db.Exec(ctx, updateLedgerAllocationAdjustment, arg.Status, arg.ID)
	return err
}
