// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ledger_allocation.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLedgerAllocationForFeeReduction = `-- name: CreateLedgerAllocationForFeeReduction :one
insert into ledger_allocation (id, ledger_id, invoice_id, datetime, amount, status, reference,
                                                   notes, allocateddate, batchnumber, source,
                                                   transaction_type)
VALUES (nextval('ledger_allocation_id_seq'::regclass), $1, $2, now(), $3, 'Confirmed', null, null, null, null, null,
        null) returning id, ledger_id, invoice_id, datetime, amount, status, reference, notes, allocateddate, batchnumber, source, transaction_type
`

type CreateLedgerAllocationForFeeReductionParams struct {
	LedgerID  pgtype.Int4
	InvoiceID pgtype.Int4
	Amount    int32
}

func (q *Queries) CreateLedgerAllocationForFeeReduction(ctx context.Context, arg CreateLedgerAllocationForFeeReductionParams) (LedgerAllocation, error) {
	row := q.db.QueryRow(ctx, createLedgerAllocationForFeeReduction, arg.LedgerID, arg.InvoiceID, arg.Amount)
	var i LedgerAllocation
	err := row.Scan(
		&i.ID,
		&i.LedgerID,
		&i.InvoiceID,
		&i.Datetime,
		&i.Amount,
		&i.Status,
		&i.Reference,
		&i.Notes,
		&i.Allocateddate,
		&i.Batchnumber,
		&i.Source,
		&i.TransactionType,
	)
	return i, err
}
