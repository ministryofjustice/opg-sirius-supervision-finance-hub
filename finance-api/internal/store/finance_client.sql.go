// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: finance_client.sql

package store

import (
	"context"
)

const getAccountInformation = `-- name: GetAccountInformation :one
WITH balances AS (SELECT i.id, fc.client_id, i.amount, COALESCE(SUM(la.amount), 0) paid
FROM finance_client fc
         LEFT JOIN invoice i ON fc.id = i.finance_client_id
         LEFT JOIN ledger_allocation la ON i.id = la.invoice_id AND la.status IN ('ALLOCATED', 'APPROVED')
WHERE fc.client_id = $1
GROUP BY i.id, fc.client_id)
SELECT COALESCE(SUM(balances.amount), 0) - SUM(balances.paid) outstanding, 0 credit, fc.payment_method
FROM finance_client fc
JOIN balances ON fc.client_id = balances.client_id
WHERE fc.client_id = $1
GROUP BY fc.payment_method
`

type GetAccountInformationRow struct {
	Outstanding   int32
	Credit        int32
	PaymentMethod string
}

func (q *Queries) GetAccountInformation(ctx context.Context, clientID int32) (GetAccountInformationRow, error) {
	row := q.db.QueryRow(ctx, getAccountInformation, clientID)
	var i GetAccountInformationRow
	err := row.Scan(&i.Outstanding, &i.Credit, &i.PaymentMethod)
	return i, err
}
