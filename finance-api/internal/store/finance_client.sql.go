// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: finance_client.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAccountInformation = `-- name: GetAccountInformation :one
SELECT cacheddebtamount, cachedcreditamount, payment_method FROM finance_client WHERE client_id = $1
`

type GetAccountInformationRow struct {
	Cacheddebtamount   pgtype.Int4
	Cachedcreditamount pgtype.Int4
	PaymentMethod      string
}

func (q *Queries) GetAccountInformation(ctx context.Context, clientID int32) (GetAccountInformationRow, error) {
	row := q.db.QueryRow(ctx, getAccountInformation, clientID)
	var i GetAccountInformationRow
	err := row.Scan(&i.Cacheddebtamount, &i.Cachedcreditamount, &i.PaymentMethod)
	return i, err
}

const getInvoices = `-- name: GetInvoices :many
SELECT id, reference, amount, raiseddate, cacheddebtamount FROM invoice WHERE finance_client_id = $1
`

type GetInvoicesRow struct {
	ID               int32
	Reference        string
	Amount           int32
	Raiseddate       pgtype.Date
	Cacheddebtamount pgtype.Int4
}

func (q *Queries) GetInvoices(ctx context.Context, financeClientID pgtype.Int4) ([]GetInvoicesRow, error) {
	rows, err := q.db.Query(ctx, getInvoices, financeClientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoicesRow
	for rows.Next() {
		var i GetInvoicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Reference,
			&i.Amount,
			&i.Raiseddate,
			&i.Cacheddebtamount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
