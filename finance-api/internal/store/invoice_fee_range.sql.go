// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: invoice_fee_range.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addInvoiceRange = `-- name: AddInvoiceRange :exec
INSERT INTO invoice_fee_range (id, invoice_id, supervisionlevel, fromdate, todate, amount)
VALUES (nextval('invoice_fee_range_id_seq'),
        $1,
        $2,
        $3,
        $4,
        $5)
`

type AddInvoiceRangeParams struct {
	InvoiceID        pgtype.Int4
	Supervisionlevel string
	Fromdate         pgtype.Date
	Todate           pgtype.Date
	Amount           int32
}

func (q *Queries) AddInvoiceRange(ctx context.Context, arg AddInvoiceRangeParams) error {
	_, err := q.db.Exec(ctx, addInvoiceRange,
		arg.InvoiceID,
		arg.Supervisionlevel,
		arg.Fromdate,
		arg.Todate,
		arg.Amount,
	)
	return err
}

const getInvoiceFeeRangeAmount = `-- name: GetInvoiceFeeRangeAmount :one
select sum(amount) / 2
from invoice_fee_range
where invoice_id = $1
  and supervisionlevel = $2
`

type GetInvoiceFeeRangeAmountParams struct {
	InvoiceID        pgtype.Int4
	Supervisionlevel string
}

func (q *Queries) GetInvoiceFeeRangeAmount(ctx context.Context, arg GetInvoiceFeeRangeAmountParams) (int32, error) {
	row := q.db.QueryRow(ctx, getInvoiceFeeRangeAmount, arg.InvoiceID, arg.Supervisionlevel)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
