// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: direct_debits.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPendingCollection = `-- name: CreatePendingCollection :exec
INSERT INTO pending_collection (id, finance_client_id, collection_date, amount, status, created_at, created_by)
VALUES (NEXTVAL('pending_collection_id_seq'),
        (SELECT id FROM finance_client WHERE client_id = $1),
        $2,
        $3,
        'PENDING',
        NOW(),
        $4)
`

type CreatePendingCollectionParams struct {
	ClientID       int32
	CollectionDate pgtype.Date
	Amount         int32
	CreatedBy      int32
}

func (q *Queries) CreatePendingCollection(ctx context.Context, arg CreatePendingCollectionParams) error {
	_, err := q.db.Exec(ctx, createPendingCollection,
		arg.ClientID,
		arg.CollectionDate,
		arg.Amount,
		arg.CreatedBy,
	)
	return err
}

const getPendingOutstandingBalance = `-- name: GetPendingOutstandingBalance :one
WITH
    finance_client_id AS (
        SELECT id FROM finance_client WHERE client_id = $1 LIMIT 1
    ),
    debt AS (
        SELECT fc.id, SUM(i.amount) AS debt
        FROM finance_client_id fc
                 LEFT JOIN invoice i ON fc.id = i.finance_client_id
        GROUP BY fc.id
    ),
    pending AS (
        SELECT fc.id, SUM(pc.amount) AS pending
        FROM pending_collection pc
                 JOIN finance_client_id fc ON pc.finance_client_id = fc.id
        WHERE status = 'PENDING'
        GROUP BY fc.id
    ),
    credit AS (
        SELECT fc.id, SUM(la.amount) AS credit
        FROM ledger l
                 JOIN ledger_allocation la ON l.id = la.ledger_id
                 JOIN finance_client_id fc ON l.finance_client_id = fc.id
        WHERE l.status = 'CONFIRMED'
          AND (
            la.status = 'ALLOCATED' OR
            (la.status IN ('UNAPPLIED', 'REAPPLIED') AND la.invoice_id IS NOT NULL)
            )
        GROUP BY fc.id
    )
SELECT
    (COALESCE(d.debt, 0) - COALESCE(c.credit, 0) - COALESCE(p.pending, 0))::INT
FROM debt d
         LEFT JOIN credit c ON c.id = d.id
         LEFT JOIN pending p ON p.id = d.id
`

func (q *Queries) GetPendingOutstandingBalance(ctx context.Context, clientID int32) (int32, error) {
	row := q.db.QueryRow(ctx, getPendingOutstandingBalance, clientID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
